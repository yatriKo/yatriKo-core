// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HotelOwner {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String

  hotels Hotel[]
}

model Hotel {
  id          Int    @id @default(autoincrement())
  ownerId     Int
  location    String
  phoneNumber Int

  owner HotelOwner @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  rooms Room[]
}

model Room {
  id       Int    @id @default(autoincrement())
  hotelId  Int
  roomType String @default("Standard")
  price    Int    @default(0)

  hotel    Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings BookingHotel[]
}

model BusOwner {
  id       Int    @id @default(autoincrement())
  name     String
  password String

  buses Bus[]
}

model Bus {
  id          Int      @id @default(autoincrement())
  ownerId     Int
  from        String
  to          String
  date        DateTime
  phoneNumber Int      @unique

  owner    BusOwner     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings BookingBus[]
  busSeats BusSeat[]
}

model BusSeat {
  id       Int    @id @default(autoincrement())
  busId    Int
  seatType String
  price    Int

  bus Bus @relation(fields: [busId], references: [id], onDelete: Cascade)
}

model User {
  id          Int    @id @default(autoincrement())
  name        String
  email       String @unique
  phoneNumber String
  password    String

  busBookings   BookingBus[]
  hotelBookings BookingHotel[]
}

model Admin {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
}

model TravelAgent {
  id          Int    @id @default(autoincrement())
  name        String
  phoneNumber String
  password    String

  busBookings   BookingBus[]
  hotelBookings BookingHotel[]
}

model BookingBus {
  id              Int      @id @default(autoincrement())
  userId          Int?
  travelerAgentId Int?
  busId           Int
  date            DateTime
  paymentStatus   Boolean

  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  bus           Bus          @relation(fields: [busId], references: [id], onDelete: Cascade)
  travelerAgent TravelAgent? @relation(fields: [travelerAgentId], references: [id], onDelete: Cascade)

  @@unique([userId, busId, date])
}

model BookingHotel {
  id              Int      @id @default(autoincrement())
  roomId          Int
  userId          Int?
  travelerAgentId Int?
  dateFrom        DateTime
  dateTo          DateTime
  paymentStatus   Boolean

  room          Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  travelerAgent TravelAgent? @relation(fields: [travelerAgentId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, dateFrom, dateTo])
}
