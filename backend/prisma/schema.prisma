// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  Admin
  HotelOwner
  BusOwner
}

enum ClientRole {
  User
  TravelAgent
}

model dashboardUser {
  id       Int    @id @default(autoincrement())
  name     String
  email    String @unique
  password String
  role     Role   @default(HotelOwner)

  buses  Bus[]
  hotels Hotel[]
}

model Hotel {
  id              Int      @id @default(autoincrement())
  name            String
  dashboardUserId Int
  location        String
  phoneNumber     String
  image           String[]

  rooms         Room[]
  dashboardUser dashboardUser? @relation(fields: [dashboardUserId], references: [id], onDelete: Cascade)
}

model Room {
  id       Int      @id @default(autoincrement())
  hotelId  Int
  roomType String   @default("Standard")
  image    String[]
  price    Int      @default(0)

  hotel    Hotel          @relation(fields: [hotelId], references: [id], onDelete: Cascade)
  bookings BookingHotel[]
}

model Bus {
  id              Int      @id @default(autoincrement())
  dashboardUserId Int
  from            String
  image           String[]
  to              String
  date            DateTime
  busNumber       String
  phoneNumber     String   @unique

  dashboardUser dashboardUser @relation(fields: [dashboardUserId], references: [id], onDelete: Cascade)
  busSeats      BusSeat[]
}

model BusSeat {
  id       Int    @id @default(autoincrement())
  busId    Int
  seatType String
  price    Int

  bookings BookingBus[]
  bus      Bus          @relation(fields: [busId], references: [id], onDelete: Cascade)
}

model User {
  id          Int    @id @default(autoincrement())
  name        String
  email       String @unique
  phoneNumber String
  password    String
  role        ClientRole @default(User)

  busBookings   BookingBus[]
  hotelBookings BookingHotel[]
}

model BookingBus {
  id              Int      @id @default(autoincrement())
  userId          Int?
  busSeatId       Int
  date            DateTime
  paymentStatus   Boolean
  clientName      String?
  clientEmail     String?

  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  BusSeat       BusSeat      @relation(fields: [busSeatId], references: [id], onDelete: Cascade)

  @@unique([userId, busSeatId, date])
}

model BookingHotel {
  id              Int      @id @default(autoincrement())
  roomId          Int
  userId          Int?
  dateFrom        DateTime
  dateTo          DateTime
  paymentStatus   Boolean
  clientName      String?
  clientEmail     String?

  room          Room         @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId, dateFrom, dateTo])
}
